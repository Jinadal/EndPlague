/*******************************************************************
** This code is part of Breakout.
**
** Breakout is free software: you can redistribute it and/or modify
** it under the terms of the CC BY 4.0 license as published by
** Creative Commons, either version 4 of the License, or (at your
** option) any later version.
******************************************************************/
#define GLEW_STATIC
#include "glew.h"
#include "glfw3.h"

//#include "game.h"
#include "SpriteRenderer.h"
#include "resource_manager.h"


// GLFW function declerations
//void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);

// The Width of the screen
const GLuint SCREEN_WIDTH = 800;
// The height of the screen
const GLuint SCREEN_HEIGHT = 600;

//Game Breakout(SCREEN_WIDTH, SCREEN_HEIGHT);


SpriteRenderer  *Renderer;


int main(int argc, char *argv[])
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

    GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Breakout", nullptr, nullptr);
    glfwMakeContextCurrent(window);

    glewExperimental = GL_TRUE;
    glewInit();
    glGetError(); // Call it once to catch glewInit() bug, all other errors are now from our application.

    //glfwSetKeyCallback(window, key_callback);

    // OpenGL configuration
    glViewport(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
    glEnable(GL_CULL_FACE);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    
   // glm::mat4 projection = glm::ortho(0.0f, 800.0f, 600.0f, 0.0f, -1.0f, 1.0f);
   
    // Initialize game
    //Breakout.Init();

    // DeltaTime variables
    //GLfloat deltaTime = 0.0f;
    //GLfloat lastFrame = 0.0f;

    // Start Game within Menu State
    //Breakout.State = GAME_ACTIVE;
    //Game* game = new Game(600,400);
    
    //while (!glfwWindowShouldClose(window))
    while (true)
    {
        //----------------------------------------------------------------------------------------
    	//----------------------------GAME INIT---------------------------------------------------
        //----------------------------------------------------------------------------------------
            // Load shaders
            ResourceManager::LoadShader("shaders/sprite.vs", "shaders/sprite.frag", nullptr, "sprite");
            // Configure shaders
            glm::mat4 projection = glm::ortho(0.0f, static_cast<GLfloat>(SCREEN_WIDTH), static_cast<GLfloat>(SCREEN_HEIGHT), 0.0f, -1.0f, 1.0f);
            ResourceManager::GetShader("sprite").Use().SetInteger("image", 0);
            ResourceManager::GetShader("sprite").SetMatrix4("projection", projection);
            // Load textures
            ResourceManager::LoadTexture("textures/awesomeface.png", GL_TRUE, "face");
            // Set render-specific controls
            Shader2 sh = ResourceManager::GetShader("sprite");
            Renderer = new SpriteRenderer(sh);
        //----------------------------------------------------------------------------------------
        //----------------------------------------------------------------------------------------

        //----------------------------GAME RENDER--------------------------------------------------
        //----------------------------------------------------------------------------------------
            Texture2D tex = ResourceManager::GetTexture("face");
            Renderer->DrawSprite(tex, glm::vec2(200, 100), glm::vec2(200, 200), 0.0f, glm::vec3(1.0f, 1.0f, 0.0f));
        //----------------------------------------------------------------------------------------
        //----------------------------------------------------------------------------------------

        // Calculate delta time
        //GLfloat currentFrame = glfwGetTime();
        //deltaTime = currentFrame - lastFrame;
        //lastFrame = currentFrame;
        glfwPollEvents();

        //deltaTime = 0.001f;
        // Manage user input
        //Breakout.ProcessInput(deltaTime);

        // Update Game state
        //Breakout.Update(deltaTime);

        // Render
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);
        //Breakout.Render();

        glfwSwapBuffers(window);
    }

    // Delete all resources as loaded using the resource manager
    ResourceManager::Clear();

    glfwTerminate();
    return 0;
}

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
    // When a user presses the escape key, we set the WindowShouldClose property to true, closing the application
    //if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        //glfwSetWindowShouldClose(window, GL_TRUE);
    //if (key >= 0 && key < 1024)
    //{
        //if (action == GLFW_PRESS)
        //    Breakout.Keys[key] = GL_TRUE;
        //else if (action == GLFW_RELEASE)
        //    Breakout.Keys[key] = GL_FALSE;
    //}
}